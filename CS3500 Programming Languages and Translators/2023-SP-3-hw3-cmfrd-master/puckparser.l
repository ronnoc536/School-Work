/********************************************************
* Connor Marler
********************************************************/


/* -- PREAMBLE  ------------------------------------------ */
%{
#include <iostream>
#include <iomanip>
#include "puckparser.tab.h" // file generated by Bison
using namespace std;

int numLines = 1;
int numTokens = 0;

void writeToken(const char* tokenType);

%}

%option noyywrap

/* ------OPTIONS & DEFINITIONS */

WSPACE		[ \t\v\r]+
NEWLINE		\n

DIGIT		[0-9]
LETTER		[a-zA-Z]

IDENT		({LETTER})+({LETTER}|{DIGIT}|_)*

INTCONST	(\+|-)?{DIGIT}+
DECCONST	{INTCONST}\.{DIGIT}+		
STRCONST	\"[^ ]\"
COMMENT		\%.*\n
%%


{WSPACE}    ;
{NEWLINE}	{
		numLines++;
		}

"IF"     {
        writeToken("K_IF");
        return K_IF;
        }
"THEN"     {
        writeToken("K_THEN");
        return K_THEN;
        }
"ELSE"     {
        writeToken("K_ELSE");
        return K_ELSE;
        }
"ENDIF"     {
        writeToken("K_ENDIF");
        return K_ENDIF;
        }
";"     {
        writeToken("K_SC");
        return K_SC;
        }
"WHILE"     {
        writeToken("K_WHILE");
        return K_WHILE;
        }
"DO"     {
        writeToken("K_DO");
        return K_DO;
        }
"ENDW"     {
        writeToken("K_ENDW");
        return K_ENDW;
        }
"("     {
        writeToken("K_LPAREN");
        return K_LPAREN;
        }
")"     {
        writeToken("K_RPAREN");
        return K_RPAREN;
        }
"PRINT"	{
		writeToken("K_PRINT");
		return K_PRINT;
		}


":="    { 
        writeToken("OP_ASSIGN"); 
        return OP_ASSIGN; 
        }
"~"    { 
        writeToken("OP_NEG"); 
        return OP_NEG; 
        }
"<"		{
		writeToken("OP_RELATION");
		return OP_RELATION;
		}
">"		{
		writeToken("OP_RELATION");
		return OP_RELATION;
		}

"="		{
		writeToken("OP_RELATION");
		return OP_RELATION;
		}
"#"		{
		writeToken("OP_RELATION");
		return OP_RELATION;
		}
"+"		{
		writeToken("OP_ADD");
		return OP_ADD; 
		}
"-"		{
		writeToken("OP_ADD");
		return OP_ADD; 
		}
"&"		{
		writeToken("OP_ADD");
		return OP_ADD; 
		}
"OR"		{
		writeToken("OP_ADD");
		return OP_ADD; 
		}
"*"		{
		writeToken("OP_MULT");
		return OP_MULT; 
		}
"/"		{
		writeToken("OP_MULT");
		return OP_MULT;  
		}
"AND"		{
		writeToken("OP_MULT");
		return OP_MULT;  
		}
{INTCONST}	{
		writeToken("T_INTEGER");
		return T_INTEGER;
		}
{DECCONST}	{
		writeToken("T_DECIMAL");
        return T_DECIMAL;
		}
{IDENT}	{
		writeToken("T_IDENT");
		return T_IDENT;
		}
{STRCONST}	{
		writeToken("T_STRING");
		return T_STRING;
		}


%%  /* -- EPILOGUE ----------------------------------------------------------------- */


void writeToken(const char* tokenType) 
{
  //printf("TOKEN: %-20s LEXEME: %s\n", tokenType, lexeme);
  cout << "TOKEN: ";
  cout << left << setw(14) << tokenType;
  cout << "LEXEME: " << yytext << endl;
}

